import { MaintainerOptions } from './maintainer.js';
type NodeCallback = (node: Node, isStart: boolean) => void;
export interface NodesOptions {
    node_id: string;
    forceNgOff: boolean;
    maintainer?: Partial<MaintainerOptions>;
}
export default class Nodes {
    private readonly nodes;
    private totalNodeAmount;
    private readonly nodeCallbacks;
    private readonly elementListeners;
    private nextNodeId;
    private readonly node_id;
    private readonly forceNgOff;
    private readonly maintainer;
    constructor(params: NodesOptions);
    syntheticMode(frameOrder: number): void;
    attachNodeCallback: (nodeCallback: NodeCallback) => number;
    scanTree: (cb: (node: Node | void) => void) => void;
    attachNodeListener: (node: Node, type: string, listener: EventListener, useCapture?: boolean) => void;
    registerNode(node: Node): [/*id:*/ number, /*isNew:*/ boolean];
    unregisterNode: (node: Node) => number | undefined;
    cleanTree(): void;
    callNodeCallbacks(node: Node, isStart: boolean): void;
    getID(node: Node): number | undefined;
    getNode(id: number): void | Node | undefined;
    getNodeCount(): number;
    clear(): void;
}
export {};
